const { ethers } = require("hardhat");
const fs = require('fs');
	
async function main(){
    const [deployer] = await ethers.getSigners();
    console.log("Deploying contracts with the account: ", deployer.address);

    console.log("Account balance: ", (await deployer.getBalance()).toString());


    // Deploy the contract to Ethereum test network - Ropsten
    const provider = ethers.providers.getDefaultProvider('ropsten')

    // Use your wallet's private key to deploy the contract
    const privateKey = '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80'
    const wallet = new ethers.Wallet(privateKey, provider)

    // Read the contract artifact, which was generated by Remix
    const metadataSafeBoxETH = JSON.parse(fs.readFileSync('artifacts/contracts/SafeBoxETH.sol/SafeBoxETH.json').toString())

    const price = ethers.utils.formatUnits(await provider.getGasPrice(), 'gwei')
    const gasPrice = ethers.utils.parseUnits(price, 'gwei')
    console.log('price'+gasPrice)
    const options = {address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', name: 'Ethereum', symbol: 'ETH'}

    //const block = await ethers.provider.getBlock()
    //console.log(block)
    
    //const SafeBoxETH = await ethers.getContractFactory("SafeBoxETH");
    //console.log(JSON.stringify(SafeBoxETH))
    //const deployedContract = await SafeBoxETH.deploy(options.address, options.name, options.symbol);
    //console.log(JSON.stringify(deployedContract))

    /*
    // Deploy the contract
    const factory = new ethers.ContractFactory(metadata.abi, metadata.bytecode, wallet)
    const contract = await factory.deploy(options.address, options.name, options.symbol,
        {gasLimit: 1500000100})
    await contract.deployed()
    console.log(`Deployment successful! Contract Address: ${contract.address}`)

    const transaction = await contract.deposit(100); 
    console.log(" address: ", transaction);
    */

    // deposit
    const alice_deposit_amt = 2 * 10**8
    console.log(alice_deposit_amt)
    let prevAliceBalance = await deployer.getBalance()

    const metadataWETH = JSON.parse(fs.readFileSync('artifacts/interfaces/IWETH.sol/IWETH.json').toString())
    var weth = new ethers.Contract(options.address,metadataWETH.abi,deployer)

    const metadataCErc20 = JSON.parse(fs.readFileSync('artifacts/interfaces/ICErc20.sol/ICErc20.json').toString())
    var cweth = new ethers.Contract(options.address,metadataCErc20.abi, deployer)
    //cweth = MockCErc20_2.deploy(weth, {'from': a[0]})

    var SafeBoxETH = new ethers.Contract(options.address,metadataSafeBoxETH.abi, deployer, cweth.address, "ibEther", "ibETH")
    //SafeBoxETH.deploy(cweth, "ibEther", "ibETH", {'from': a[0]})

    SafeBoxETH.deposit({'from': wallet.address, 'value': alice_deposit_amt})
    
    console.log(provider._network)
    console.log('alice balance' + await deployer.getBalance())
    console.log('contact addresss: ' + SafeBoxETH.address)
    console.log('safebox eth balance : ' + await cweth.balanceOf({address: provider._network.ensAddress.toString().toLowerCase()}))
    console.log('deposit amount of alice: ' + alice_deposit_amt)
    //console.log('safebox eth balance of alice: ' + await SafeBoxETH.balanceOf(wallet.address))


    // withdraw
    const alice_withdraw_amt = 2 * 10**8
    console.log('previous balance of alice before withdrawal: ' + prevAliceBalance)
    SafeBoxETH.withdraw(alice_withdraw_amt, {'from': wallet.address})
    console.log('alice balance' + await deployer.getBalance())
    //console.log('safeboc eth balance: ' + await cweth.balanceOf(SafeBoxETH.address))
    console.log('difference of alice deposit and withdraw amount: ' + (alice_deposit_amt - alice_withdraw_amt))
        
}

main()  
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1)
});